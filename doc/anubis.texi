\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename anubis.info
@settitle GNU Anubis Manual
@setchapternewpage odd
@finalout
@c %**end of header
@include version.texi
@smallbook

@defcodeindex op
@defcodeindex cm
@syncodeindex fn cp

@copying
Copyright @copyright{} 2001, 2002, 2003 Wojciech Polak and Sergey Poznyakoff.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end copying

@ifinfo
@dircategory Email
@direntry
* Anubis: (anubis).             The GNU outgoing mail processor.
@end direntry
@end ifinfo

@titlepage
@title GNU Anubis
@subtitle An outgoing mail processor and the SMTP tunnel
@subtitle GNU Anubis Version @value{VERSION}
@subtitle @value{UPDATED}
@author Wojciech Polak and Sergey Poznyakoff
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage


@node Top, Overview, , (dir)
@ifinfo
@chapter GNU Anubis
This edition of the @cite{GNU Anubis Manual}, last updated @value{UPDATED},
documents GNU Anubis Version @value{VERSION}.
@end ifinfo

@menu
* Overview::                        Preliminary information.
* Glossary::                        Frequently Used Terms Explained.
* Configuration::                   Writing your own configuration files.
* Rule System::                     How to use the Rule System.
* Invoking Anubis::                 How to invoke the GNU @command{anubis}.
* Sample Beginning::                Here is a sample beginning.
* TLS/SSL::                         Using the TLS/SSL Encryption.
* Problems::                        Reporting bugs.

Appendices

* GNU Free Documentation License::  This manual is under the GNU Free
                                    Documentation License.
Indices

* Concept Index::                   Index of concepts.
@end menu


@node Overview, Glossary, Top, Top
@chapter Overview
@cindex overview
@cindex Simple Mail Transport Protocol, SMTP
@cindex daemon
@cindex client
@cindex tunnel
@cindex proxy
@cindex server
@cindex outgoing mail processor
@cindex on-the-fly
@cindex MUA, Mail User Agent
@cindex MTA, Mail Transport Agent

GNU Anubis is an outgoing mail processor. Its purpose is to receive
the outgoing message, perform some manipulations over its contents,
and to forward the altered message to the mail transport agent.

The usual mail sending scheme looks as follows: the user composes
his message using @dfn{mail user agent} (@dfn{MUA} for short). Once
the message is composed, the user sends it. When the MUA receives
the send command it connects to the @dfn{mail transport agent}
(@dfn{MTA} for short) and passes it the message for delivery. The
figure below illustrates this interaction:

@smallexample
+-------+                 +-------+               
|  MUA  | ---[outmsg]---> |  MTA  | ... [outmsg]
+-------+                 +-------+         |     
                                            |
                                            V
                                     +--------------+
                                     |  Recipient's |
                                     |   Mailbox    |  
                                     +--------------+
                                                        
@end smallexample

As shown in this figure, the outgoing message (@dfn{outmsg}), reaches
the recipient's mailbox unaltered.

However, there are situations where it may be necessary to modify
the outgoing message before it reaches MTA. As the simplest example,
the user might wish to sign the outgoing messages with his PGP
key, but his MUA does not support this operation or supports it
unconditionally.

In such cases, installing GNU Anubis between the MUA and MTA
allows the user to perform any additional processing on the
sent message. The figure below illustrates this concept:

@smallexample
+-------+                 +--------+                 +-------+               
|  MUA  | ---[outmsg]---> | Anubis | ---[modmsg]---> |  MTA  | 
+-------+                 +--------+                 +-------+     
                                                         |
                                                      [modmsg]
                                                         .
                                                         .
                                                         V
                                                  +--------------+
                                                  |  Recipient's |
                                                  |   Mailbox    |  
                                                  +--------------+
@end smallexample

The outgoing message is processed by GNU Anubis, and it is
the resulting message (@dfn{modmsg}) that reaches the MTA.

GNU Anubis is able to perform on messages a wide set of operations,
such as modifying message headers or body, encrypting or signing
messages with GPG (GNU Privacy Guard) keys, installing secure tunnels
to MTA using TLS/SSL encryption, tunneling messages through
SOCKS proxies, etc.

When the set of built-in operations is not enough, the user can
define his own operations using Guile, a @dfn{GNU's Ubiquitous
Intelligent Language for Extensions}.

The message processing is controlled by system-wide and per-user
configuration files written in a flexible and easy to use
command scripting language, specially desgined for this
purpose.


@node Glossary, Configuration, Overview, Top
@chapter Glossary of Frequently Used Terms

@table @dfn
@item Protocol
Any standard for the exchange of information. A protocol
defines the specific wording and control flow for communications between
two or more programs, devices, or systems.

@item SMTP
Simpe Mail Tansport Protocol is a common mechanism for exchanging
mail across a network. This protocol is described in the RFC 821 document.

@item Daemon
We use a term @dfn{daemon} to define a process that runs in the
background, doing automated processing.

@item Server
A server provides information or other services for its
clients. Most network protocols are client--server based. This term usually
refers to an entire machine, but it can refer (and we're doing that) also
to the particular program or process, on that machine, that provides the
service.

@item Proxy
We use a term @dfn{proxy} to define a program, which goes
between the MUA and the MTA (it makes a tunnel). It can be used as a gateway
to the outside world, while using a firewall. In this case the host
under the firewall sends data to the proxy server, which in turn
forwards it to the real server outside, receives 
the response, and passes it back to the internal host.

@item Guile
GNU's Ubiquitous Intelligent Language for Extensions. It provides a
Scheme interpreter conforming to the R4RS language specification. GNU
Anubis uses Guile as its extension language.
For more information about Guile,
@xref{Top,,Overview,guile,The Guile Reference Manual}.

@item GPG
GNU Privacy Guard, a tool compatible with the Pretty Good Privacy.
@end table


@node Configuration, Rule System, Glossary, Top
@chapter Configuration
@cindex configuration
@cindex settings
@cindex system configuration file
@cindex user configuration file

The behavior of GNU Anubis is controlled by two configuration files.
The @dfn{system configuration file}, @file{/etc/anubisrc},
specifies system-wide options that affect all users. This file is usually
owned by root. The @dfn{user configuration file}, @file{~/.anubisrc},
specifies what GNU Anubis should do for a particular user.
To protect your passwords in the configuration files, use the 0600
(u=rw,g=,o=) permissions, otherwise GNU Anubis won't accept them.

@subheading Lexical Structure

Both configuration files use simple line-oriented syntax. Each
line introduces a single statement. A statement consists of
@dfn{words}, each word being defined as a contiguous sequence of
non-whitespace symbols. A word may be composed of alphanumeric
characters and any of the following punctuation symbols:
@samp{_}, @samp{.}, @samp{/}, @samp{-}. Any arbitrary sequence
of characters enclosed in a pair of doublequotes is also recognized
as a word.

The familiar shell @dfn{here document} syntax may be used to produce
a word containing several lines of text. The syntax is:

@smallexample
<<[-]delimiter
    text
delimiter
@end smallexample                                                  

If ``here document'' starts with @samp{<<-}, then all leading tab
characters are stripped from input lines and the line containing
@dfn{delimiter}. This allows to indent here-document in a natural
fashion.

To summarize all the above, let's consider the example:

@smallexample
@group
first-word "second word" <<-EOT
                            Third word
                            containing several
                            lines of text
                            EOT
@end group
@end smallexample

@noindent
This line contains three words: @samp{first-word}, @samp{second word}
and the third one composed of the three lines between the @samp{EOT}
markers.

If a statement is very long, it may be split among several lines
of text. To do so, preceede the newline characters with a backslash
@samp{\}, e.g.:

@smallexample
@group
a very long statement\
  occupying several lines\
  of text
@end group  
@end smallexample

A @samp{#} in a line starts a @dfn{comment}. It and the rest of
the line are ignored. Comments may appear on any of the lines in
the configuration file, except on a commands and within a
``here-document'' construction.
A line containing just a comment (with perhaps spaces before it) is
effectively blank, and is ignored. For example:

@smallexample
@group
# This is a comment
if header[Subject] :re "No.*"  # This is also a comment
  guile-process action-name This # is not a comment!!!
fi
@end group
@end smallexample

@subheading Logical Structure

The statements within a configuration file are grouped into
@dfn{sections}. Each section has its name. A section begins with
one of the following constructs:

@smallexample
BEGIN @var{name}
---BEGIN @var{name}---
@end smallexample

@noindent

and ends with one of the following constructs:

@smallexample
END
---END---
@end smallexample

Notice, that both @samp{BEGIN} and @samp{END} must be uppercase.
When using the second form, any amount of whitespace is allowed
between the three dashes and the word.

The sections cannot be nested.

There are three predefined sections, whose names are uppercase.
The user may define his own sections, which may then be referred
to from the @code{RULE} section as subroutines (@pxref{Call Action}).

The predefined section names are:

@table @dfn
@item CONTROL
This section specifies the basic GNU Anubis behavior. Its presence
is required in the system configuration file. It may be used in
the user configuration file to override the system-wide settings.
@item TRANSLATION
This section specifies a translation map for remapping
remote or local users. It may be used only in the syste-wide
configuration file.
@item GUILE
Contains the settings of the Guile interpreter. The section is
allowed in both configuration files.
@item RULE
Defines the rules that are used to alter the contents of the
messages (conditional and unconditional rules).
@end table

@menu
* CONTROL Section::
* TRANSLATION Section::
* GUILE Section::
@end menu


@node CONTROL Section, TRANSLATION Section, Configuration, Configuration
@section CONTROL Section
@cindex CONTROL section

The @samp{CONTROL} section specifies the basic GNU Anubis behavior.
Specified in the system configuration file, it applies to all users on
the machine, but each user can specify its own @samp{CONTROL} section,
to customize own settings. Of course, not all options can be set
or change by user. Some options can only be set in the system configuration
file, and some only in user configuration file. By default, options
specified in user configuration file have a @strong{higher} priority
that those specified in system configuration file.

All option names are case insensitive, so you can use
for instance: @code{bind} or @code{BIND} or @code{BiNd}, and so on.

@menu
* Basic Settings::
* Output Settings::
* Proxy Settings::
* Encryption Settings::
* Security Settings::
@end menu


@node Basic Settings, Output Settings, CONTROL Section, CONTROL Section
@subsection Basic Settings

@deffn Option bind [@var{host}:]@var{port}
@opindex bind [@var{host}:]@var{port}
Specify the TCP port on which GNU Anubis listens for connections.
The default @var{host} value is @w{@samp{INADDR_ANY}}, which means
that anyone can connect to GNU Anubis. The default @var{port} number
is 24 (private mail system). This option is available only in the
system configuration file. If you would like, for instance, to bind
GNU Anubis to port 25 (SMTP) and limit its clients only to those from
@samp{localhost}, then set the following in your system
configuration file:

@smallexample
bind localhost:25
@end smallexample
@end deffn

@deffn Option remote-mta @var{host}[:@var{port}]
@opindex remote-mta @var{host}[:@var{port}]
Specify a remote SMTP host name or IP address, which GNU Anubis will
connect and forward mail to (after a processing). The default @var{port}
number is 25. This option is available in both configuration files.
@end deffn

@deffn Option local-mta @var{file-name} [@var{args}]
@opindex local-mta @var{file-name} [@var{args}]
Execute a local SMTP server, which works on standard input and output
(inetd-type program). This option excludes the @samp{remote-mta} keyword
(or @samp{--remote-mta} command line option). For example:

@smallexample
local-mta /usr/sbin/sendmail -bs
@end smallexample
@end deffn

@deffn Option esmtp-auth @var{username}:@var{password}
@opindex esmtp-auth @var{username}:@var{password}
This option allows you to specify a user name and a password for the
ESMTP authentication. Use this option if your MTA requires such an
authentication, but your MUA does not support it. A @var{username}
and a @var{password} are separated with a colon (@samp{:}).
Currently only @dfn{CRAM-MD5} and @dfn{LOGIN} authentication methods are
supported (and @dfn{CRAM-MD5} has a priority). The @dfn{LOGIN} method,
for security reasons, can only be used both with the TLS/SSL encryption.
@end deffn


@node Output Settings, Proxy Settings, Basic Settings, CONTROL Section
@subsection Output Settings

@deffn Option termlevel @var{level}
@opindex termlevel @var{level}
This is a logging level for @code{syslogd} or a terminal (if using the
@samp{--foreground} command line option).  @var{level} can be one
of the following:

@table @asis
@item normal
Only errors are logged. This is the default level.

@item verbose
Produce more diagnostic output.

@item debug
Produce debugging output.

@item silent
Do not log anything.

@end table

This command may be used only in system configuration file.
@end deffn

@deffn Option logfile @var{file-name}
@opindex logfile @var{file-name}
This command specifies an additional file, where GNU Anubis can log its
information, but only those information available for a client. Only in
user configuration file. For example:

@smallexample
logfile = anubis.log
@end smallexample

This will log to the @file{~/anubis.log} file in a client's home directory.
@end deffn

@deffn Option loglevel @var{level}
@opindex loglevel @var{level}
This option specifies an output level for an additional file
(@samp{logfile}). It can be used only in user configuration file.
@var{level} is one of the following:

@table @asis
@item none
@item fails
@item all
@end table
@end deffn


@node Proxy Settings, Encryption Settings, Output Settings, CONTROL Section
@subsection Proxy Settings
@cindex SOCKS proxy

@deffn Option socks-proxy @var{host}[:@var{port}]
@opindex socks-proxy @var{host}[:@var{port}]
This option enables tunneling the connections through a SOCKS proxy server,
specified as an argument @var{host}. The @var{port} default value is
1080, which is a common port number for SOCKS proxies.
@end deffn

@deffn Option socks-v4 @var{yes-or-no}
@opindex socks-v4 @var{yes-or-no}
This specifies a SOCKS protocol version 4. By default it is turned off,
and a default mode is SOCKS protocol version 5.
@end deffn

@deffn Option socks-auth @var{username}:@var{password}
@opindex socks-auth @var{username}:@var{password}
Specify a user name and a password, if a SOCKS proxy server requires them.
A @var{username} and a @var{password} are separated with a colon (@samp{:}).
@end deffn


@node Encryption Settings, Security Settings, Proxy Settings, CONTROL Section
@subsection Encryption Settings

@deffn Option ssl @var{yes-or-no}
@opindex ssl @var{yes-or-no}
This option enables the TLS/SSL encryption between the MUA and the MTA.
Value @samp{no} is the default, but using the TLS/SSL encryption
is recommended. You should also specify a private key and a certificate
using the @samp{ssl-key} and @samp{ssl-cert} keywords (defined below).
@xref{TLS/SSL}, for details.
@end deffn

@deffn Option ssl-oneway @var{yes-or-no}
@opindex ssl-oneway @var{yes-or-no}
This option enables the @dfn{ONEWAY} encryption. Use this mode,
when you want to use the TLS/SSL, but your MUA doesn't provide
a support for ESMTP TLS/SSL. Using this option doesn't require
using the @samp{ssl-key} and @samp{ssl-cert} keywords.
@end deffn

@deffn Option ssl-cert @var{file-name}
@opindex ssl-cert @var{file-name}
Specify a certificate for the TLS/SSL encryption.
Value @file{anubis.pem} is the default.
@end deffn

@deffn Option ssl-key @var{file-name}
@opindex ssl-key @var{file-name}
Specify a private key for the TLS/SSL encryption.
Value @file{anubis.pem} is the default.
@end deffn

@deffn Option ssl-cafile @var{file-name}
@opindex ssl-cafile @var{file-name}
Specify a CA certificate file (supported only by GnuTLS).
@end deffn


@node Security Settings, , Encryption Settings, CONTROL Section
@subsection Security Settings

The following options control various security settings. 

@deffn Option allow-local-mta @var{yes-or-no}
@opindex allow-local-mta @var{yes-or-no}
For security reasons, this option is set to @samp{no}, but the @samp{yes}
value enables the @samp{local-mta} keyword (or @samp{--local-mta}
command line option), so if you want to use a local mail server,
which works on standard input and output, a supervisor must set
this option to @samp{yes}. The option is available only in system
configuration file.
@end deffn

@deffn Option drop-unknown-user @var{yes-or-no}
@opindex drop-unknown-user @var{yes-or-no}
This option drops an unknown user, i.e. a client which has not
been verified by IDENT service. Value @samp{no} is the default.
@end deffn

@deffn Option user-notprivileged @var{username}
@opindex user-notprivileged @var{username}
For security reasons, it is recommended to create an unprivileged user,
which the server runs as most of the time, when doing unprivileged
operations. The option is available only in system
configuration file. For example: 

@smallexample
user-notprivileged "anubis.unprivileged"
@end smallexample

@strong{Caution:} Create a user account named @w{@samp{anubis.unprivileged}}
in the @file{/etc/passwd}, if necessary. Add this user name also to the
@w{@file{/etc/anubis.allow}}, if using GNU Anubis with PAM support.
@end deffn

@deffn Option rule-priority @var{value}
@opindex rule-priority @var{value}

This statement defines the order of execution of the system and user
@code{RULE} sections (@xref{Rule System}, for detailed description).
It is available only in system configuration file.

@table @code
@item system
The system section is executed first, then the user section is executed.

@item user
The user section is executed first, next the system section is executed.

@item system-only
Only the system @code{RULE} section is executed.

@item user-only
Only the user @code{RULE} section is executed.
@end table
@end deffn

@deffn Option control-priority @var{value}
@opindex control-priority @var{value}

Sets the order of processing the @code{CONTROL} sections. The option is
available only in system configuration file. Its possible values are:

@table @code
@item system
The system @code{CONTROL} section is processed first. Notice, that
this means that the user may override the system settings in his
configuration file. This is the default setting.

@item user
The user @code{CONTROL} section is processed first. Thus, the
system-wide settings always override the user private settings.
@end table
@end deffn

@node TRANSLATION Section, GUILE Section, CONTROL Section, Configuration
@section TRANSLATION Section
@cindex TRANSLATION section

The @samp{TRANSLATION} section specifies how to translate remote or local
user names, or host names or addresses, to local user names.
The @samp{TRANSLATION} section is available @emph{only} in the system
configuration file. Syntax:

@smallexample
@group
---BEGIN TRANSLATION---
translate  [@var{user}@@]@var{address} into  @var{username}
...
---END---
@end group
@end smallexample

@var{address} means host name or IP address. You can also specify
@samp{0.0.0.0}, and it means any address (@samp{INADDR_ANY}).

An example:

@smallexample
@group
---BEGIN TRANSLATION---
translate jack@@somewhere.net into john
---END---
@end group
@end smallexample

@noindent
The rule above will allow a remote user @samp{jack} at @samp{somewhere.net}
to use the configuration file of the local user @samp{john}. Or you can write:
@w{@samp{translate somewhere.net into john}},
and this means that @emph{all} users at @samp{somewhere.net} are allowed to use
the local john's configuration file.


@node GUILE Section, , TRANSLATION Section, Configuration
@section GUILE Section
@cindex GUILE section
@cindex Guile
@cindex extension language
@cindex Scheme

@deffn Command guile-output @var{file}
Specifies the name of the file to bind to the Scheme standart error
and output ports. This option has no effect if GNU Anubis is started
with either of @option{--foreground} or @option{--stdio} command line
options. 
@end deffn

@deffn Command guile-debug @var{yes-or-no}
When set to @samp{yes} enables Guile stack traces and debugging output.
@end deffn

@deffn Command guile-load-path-append @var{path}
Appends the given @var{path} to the list of Guile load paths
(@pxref{Build Config, %load-path,,guile,The Guile Reference Manual}).
@end deffn

@deffn Command guile-load-program @var{file}
Reads the given Scheme program.
@end deffn


@node Rule System, Invoking Anubis, Configuration, Top
@chapter The Rule System
@cindex rule system

The rule system is a core part of GNU Anubis. It can be regarded
as a program that is executed for every outgoing message. 

Throughout this chapter, when showing syntax definitions, the
optional parts of these will be enclosed in a pair of square
brackets, e.g.:

@smallexample
keyword [@var{optional-part}] @var{mandatory-part}
@end smallexample

@noindent
When the square braces are required symbols, they will be marked
as such, e.g.:

@smallexample
remove @samp{[}@var{key}@samp{]}
@end smallexample

The rule system is defined in @dfn{RULE} section.
The statements within this section are executed sequentially.
Each statement is either an @dfn{action} or a @dfn{conditional
statement}.

@menu
* Actions::
* Conditional Statements::
* Triggers::
* Boolean Operators::
* Regular Expressions::
* Action List::
* Using Guile Actions::
@end menu


@node Actions, Conditional Statements, Rule System, Rule System
@section Actions
@cindex actions defined

An @dfn{action} is a statement defining an operation to be performed
over the message. Syntactically, each action is

@smallexample
@var{command} [=] @var{right-hand-side}
@end smallexample

@noindent
Where @var{command} specifies a particular operation and
@var{right-hand-side} specifies the arguments for it. The equal sign
is optional.


@node Conditional Statements, Triggers, Actions, Rule System
@section Conditional Statements
@cindex Conditional statements
@cindex @code{if}, conditional statements
@cindex @code{else}, conditional statements
@cindex @code{fi}, conditional statements

A @dfn{conditional statement} defines the control flow in the section.
It allows to execute arbitrary actions depending on whether a certain
condition is met. A conditional statement in its simplest form is:

@smallexample
if @var{part} [@var{pattern-match-flags}] @var{cond-expr}
  @var{action-list-1}
fi
@end smallexample
    
The @var{part} specifies which part of the input should be considered
when evaluating the condition. It is either @samp{command}, meaning
the text of an smtp command issued while sending the message, or
@samp{header}, meaning the value of an RFC822 header. Either of the
two may be followed by the name of the corresponding command or
header enclosed in square braquets. If this part is missing, all
command or headers will be searched. 

The optional @var{pattern-match-flags} alter the pattern matching
type used in subsequent conditional expression. It
will be described in detail in the section @ref{Regular Expressions}.
The @var{cond-expr} is a @dfn{conditional expression}.
It consists of a series of @dfn{conditions} joined together with
boolean operators @samp{and} or @samp{or} (@pxref{Boolean Operators}).
Each condition is:

@table @asis
@item = @var{regexp}
Returns true if the requested part of the input matches the given regular
expression (@var{regexp}).

@item != @var{regexp}
Returns true if the requested part of the input does not match the given
regular expression.

@item not @var{condition}
Reverses the sense of @var{condition}

@item ( @var{cond-expr} )
Returns the result of the conditional expression in parentheses. This
is useful for changing operator precedence. 
@end table

The simplest example:

@smallexample
@group
if header [Subject] "^ *Re:"
  ...
fi
@end group
@end smallexample

The actions represented by @dots{} will be executed only if the
@samp{Subject:} header of the message starts with @samp{Re:} optionally
preceeded by any amount of whitespace.

The more elaborate form of a conditional allows you to choose among
the two different action sets depending on a given condition. The
syntax is:

@smallexample
if @var{part} [@var{flags}] @var{cond-expr}
  @var{action-list-1}
else
  @var{action-list-2}
fi
@end smallexample

Here, the @var{action-list-1} is executed if the condition
@var{cond-expr} is met. Otherwise, @var{action-list-2} is
executed.

@smallexample
@group
if @var{part} [@var{flags}] @var{cond-expr}
  @var{action-list-1}
else
  @var{action-list-2}  
fi
@end group
@end smallexample
@noindent

Note also, that in the examples above any of the statements
@var{action-list} may contain conditionals, so that the conditional
statements may be nested. This allows to create very sophisticated
rule sets. As an example, consider the following statement:

@smallexample
if [List-Id] :re ".*<anubis-commit@@gnu.org>"
  modify [Subject] "[Anubis Commit Notice] &"
else
  if [List-Id] :re ".*<bug-anubis@@gnu.org>"
    modify [Subject] "[Anubis Bug Notice] &"
  else
    add [X-Passed] "Subject checking"
  fi
fi  
@end smallexample

This statement, depending on the value of @code{List-Id} header, will
prepend the @code{Subject} header with an identification string, or add
an @code{X-Passed} header if no known @code{List-Id} was found.

@node Triggers, Boolean Operators, Conditional Statements, Rule System
@section Triggers
@cindex Triggers

Triggers are conditional statements that use the value of the
@samp{Subject} header to alter the control flow. Syntactically, a
trigger is:

@smallexample
@group
trigger [@var{flags}] @var{pattern}
  @var{action-list}
done
@end group
@end smallexample

@noindent
Here, @var{pattern} is the pattern against which the @samp{Subject}
header is checked, @var{flags} are optional flags controlling the
type of regular expression used (@pxref{Regular Expressions}). For
backward compatibility, the keyword @code{rule} may be used instead
of @code{trigger}.

The triggers act as follows: First, the value of the @samp{Subject} header is
matched against the pattern @samp{@@@@}@var{pattern}. If it matches,
then the matched part is removed from the @samp{Subject}, and the
@var{action-list} is executed.

Basically, putting aside the possibility to use different flavors of
regular expressions, a trigger is equivalent to the following statement:

@smallexample
@group
if header[Subject] :posix "(.*)@@@@@var{pattern}"
  modify header [Subject] "\1"
  @var{action-list}
fi
@end group
@end smallexample

Thus, adding the @samp{@@@@@var{rule-name}} code to the @samp{Subject}
header of your message, triggers a rule named @var{rule-name},
specified in a user configuration file. For example:

@smallexample
@group
---BEGIN RULE---
trigger :basic "^gpg-encrypt-john"
   gpg-encrypt "john's_gpg_key"
done
---END---
@end group
@end smallexample

@noindent
Now you can simply send an email with the following subject:
@w{@samp{hello John!@@@@gpg-encrypt-john}} to process an outgoing message
with the rule specified above---encrypt message with a John's public key.
Moreover, the trigger will remove the @samp{@@@@}, so John will only receive
a message with a subject @samp{hello John!}.

Another example shows an even more dynamic trigger, that is using
a substitution and back-references:

@smallexample
@group
---BEGIN RULE---
trigger :extended "^gpg-encrypt:(.*)"
   gpg-encrypt "\1"
   add [X-GPG-Comment] "Encrypted for \1"
done
---END---
@end group
@end smallexample

@noindent
To encrypt a message to user e.g. @samp{John}, simply send an email with
a subject @w{@samp{hello John!@@@@gpg-encrypt:john's_gpg_key}}.
This way, you decide at a run time which public key should be used,
without creating separate rules for each user; thanks to back-references,
those 3---4 lines are enough.


@node Boolean Operators, Regular Expressions, Triggers, Rule System
@section Boolean Operators

The following table lists the three boolean operators that can be used
in Anubis conditional expressions in the order of increasing binding
strength:

@itemize @bullet
@item @samp{OR}
@item @samp{AND}
@item @samp{NOT}
@end itemize

As an example, let's consider the following statement:

@smallexample
@group
if header[X-Mailer] "mutt" or header[X-Mailer] "mail" \
   and not header[Content-Type] "^multipart/mixed;.*"
   @var{action}
fi
@end group
@end smallexample
@noindent

In this case the @var{action} will be executed if the @code{X-Mailer}
header contains the word @samp{mutt}. The same @var{action} will also
be executed if the @code{X-Mailer} header contains the word @samp{mail}
@emph{and} the value of the @code{Content-Type} header does not begin
with the string @samp{multipart/mixed}.

Now, if we wished to execute the @var{action} for any message sent
using @command{mail} or @command{mutt} whose @code{Content-Type}
header does not begin with the string @samp{multipart/mixed}, we would
write the following:

@smallexample
@group
if (header[X-Mailer] "mutt" or header[X-Mailer] "mail") \
   and not header[Content-Type] "^multipart/mixed;.*"
   @var{action}
fi
@end group
@end smallexample
@noindent

Notice the use of parentheses to change the binding strength of the
boolean operators.


@node Regular Expressions, Action List, Boolean Operators, Rule System
@section Regular Expressions
@cindex regex, flag
@cindex re, flag
@cindex perl, flag
@cindex perlre, flag
@cindex exact, flag
@cindex ex, flag
@cindex scase, flag
@cindex icase, flag
@cindex basic, flag
@cindex extended, flag

GNU Anubis supports two types of regular expressions: POSIX (both
basic and extended), and Perl-style regular expressions. Among this,
the former are always supported, whereas the support for the latter
depends on the configuration settings at compile time. The default
type of regular expressions is POSIX Extended. 

A number of modifiers is provided to change the type of regular
expressions. These are described in the following table.

@table @code
@item :regex
@itemx :re
Indicates that the following pattern should be considered a regular
expression. The default type for this expression is assumed.

@item :perl
@itemx :perlre
The regular expression is a Perl-style one.

@item :exact
@itemx :ex
Disables regular expression matching, all patterns will be matched
as exact strings.

@item :scase
Enables case-sensitive comparison.

@item :icase
Enables case-insensitive comparison.

@item :basic
Switches to the POSIX Basic regular expression matching.

@item :extended
Switches to the POSIX Extended regular expression matching.
@end table

The special statement @code{regex} allows you to alter the default
regular expression type. For example, the following statement

@smallexample
regex :perl :scase
@end smallexample

sets the default regular expression types to Perl-style, case-sensitive.
The settings of @code{regex} statement regard only those patterns that
appear after it in the configuration file and have force until the
next occurrence of the @code{regex} statement. 

A couple of examples:

@smallexample
@group
if header[Subject] :perlre "(?<=(?<!foo)bar)baz"
 ...
fi
@end group
@end smallexample

@noindent
This will match any @code{Subject} header whose value
matches an occurrence of @samp{baz} that is preceded by @samp{bar}
which in turn is not preceded by @samp{foo}.
              
@smallexample
if header[Subject] :scase "^Re"
@end smallexample

@noindent
will match a @code{Subject} header whose value starts with @samp{Re},
but will not match it if it starts with @samp{RE} or @samp{re}.

When using POSIX regular expressions, the extended syntax is enabled
by default. If you wish to use a basic regular expression, precede
it with the @code{:basic} flag.

For the detailed description of POSIX regular expressions,
@xref{Top,,Regular Expression Library,regex,Regular Expression Library}.
For information about Perl-style regular expressions, refer to the
Perl documentation.


@node Action List, Using Guile Actions, Regular Expressions, Rule System
@section Action List
@cindex Action List

An @dfn{action list} is a list of action commands, which control processing
of an outgoing messages. All action command names are case insensitive, so you
can use for instance: @samp{add} or @samp{ADD} or @samp{AdD}, and so on.

@menu
* Stop Action::            Stopping the Processing
* Call Action::            Invoking Another Section
* Adding Headers or Text:: How to add a new header or body line(s).
* Removing Headers::       How to remove a message header line(s).
* Modifying Messages::     How to modify a message contents on-the-fly.
* Inserting Files::        How to append text files to an outgoing message.
* Mail Encryption::        How to encrypt a message on-the-fly.
* External Processor::     How to process a message body using an external tool.
* Quick Example::          A quick example of using an action list.
@end menu


@node Stop Action, Call Action, Action List, Action List
@subsection Stop Action
@cindex @code{stop}

The @code{stop} command stops immediately the processing of the
section. It may be used in the main @code{RULE} section as well as
in any user-defined section. For example:

@smallexample
if not header[Content-Type] "text/plain; .*"
  stop;
fi
@end smallexample


@node Call Action, Adding Headers or Text, Stop Action, Action List
@subsection Call Action
@cindex @code{call}

The @code{call} command allows to invoke a user-defined section much
in the same manner as a subroutine in a programming language. The
invoked section continues to execute until its end or the @code{stop}
statement is encountered, whichever the first.

@smallexample
BEGIN myproc
if header[Subject] "Re: .*"
  stop;
fi
trigger "pgp"
  gpg-encrypt "my_gpg_key"
done
END

BEGIN RULE
call myproc
END
@end smallexample


@node Adding Headers or Text, Removing Headers, Call Action, Action List
@subsection Adding Headers or Text
@cindex @code{add}

The @code{add} command allows you to add arbitrary headers or text
to the message. To add a header, use the following syntax:

@deffn Command add header @samp{[}@var{name}@samp{]} @var{string}
@deffnx Command add @samp{[}@var{name}@samp{]} @var{string}
For example:

@smallexample
add header[X-Comment-1] "GNU's Not Unix!"
add [X-Comment-2] "Support FSF!"
@end smallexample
@end deffn

@deffn Command add body @var{text}
Adds the @var{text} to the message body. Use of this command with
@samp{here document} syntax allows to append multiline text to the
message, e.g.:

@smallexample
@group
add body <<-EOT
    Regards,
    Hostmaster
    EOT
@end group
@end smallexample
@end deffn


@node Removing Headers, Modifying Messages, Adding Headers or Text, Action List
@subsection Removing Headers
@cindex @code{remove}

The command @code{remove} removes the specified header from the
message. The syntax is:

@deffn Command remove [@var{flags}] header @samp{[}@var{string}@samp{]}
@deffnx Command remove [@var{flags}] @samp{[}@var{string}@samp{]}

The name of the header to delete is given by @var{string} parameter.
By default only those headers are removed whose names match it exactly.
Optional @var{flags} allow to change this behavior. @xref{Regular Expressions},
for the detailed description of these.

An example:

@smallexample
remove ["X-Mailer"]
remove :regex ["^X-.*"]
@end smallexample

The first example will remove the @samp{X-Mailer:} header from
an outgoing message, and the second one will remove all "X-*"
headers.
@end deffn


@node Modifying Messages, Inserting Files, Removing Headers, Action List
@subsection Modifying Messages
@cindex @code{modify}

The action command @code{modify} allows to alter the headers
or the body of the message. 

@deffn Command modify [@var{flags}] header @samp{[}@var{key}@samp{]} @samp{[}@var{new-key}@samp{]}
@deffnx Command modify [@var{flags}] @samp{[}@var{key}@samp{]} @samp{[}@var{new-key}@samp{]}

For each header whose name matches @var{key}, replaces its name
with @var{new-key}. If @var{key} is a regular expressions, @var{new-key}
may contain back references. For example, the following statement will
select all headers whose names start with @samp{X-} and change their
names to begin with @samp{X-Old-}:

@smallexample
modify header :re ["X-\(.*\)"] ["X-Old-\1"]
@end smallexample
@end deffn

@deffn Command modify [@var{flags}] header @samp{[}@var{key}@samp{]} @var{value}
@deffnx Command modify [@var{flags}] @samp{[}@var{key}@samp{]} @var{value}

For each header whose name matches @var{key}, changes its value to
@var{value}. For example:

@smallexample
modify [Subject] "New subject"
@end smallexample

@noindent
This statement sets the new value to the @code{Subject} header.

Every occurrence of unescaped @samp{&} in the new value will be replaced
by the old header value. For example, the following statement

@smallexample
modify [Subject] "[Anubis \& others] &"
@end smallexample

@noindent
prepends the @code{Subject} header with the string @samp{[Anubis &
others]}. Thus, the header line

@smallexample
Subject: Test subject
@end smallexample

@noindent

after having been processed by Anubis, will contain:

@smallexample
Subject: [Anubis & others] Test subject
@end smallexample

@end deffn

@deffn Command modify [@var{flags}] header @samp{[}@var{key}@samp{]} @samp{[}@var{new-key}@samp{]} @var{value}
@deffnx Command modify [@var{flags}] @samp{[}@var{key}@samp{]} @samp{[}@var{new-key}@samp{]} @var{value}

Combines the previous two cases, i.e. changes both the header
name and its value, as shown in the following example:

@smallexample
modify header [X-Mailer] [X-X-Mailer] "GNU Anubis"
@end smallexample
@end deffn

@deffn Command modify [@var{flags}] body @samp{[}@var{key}@samp{]}
Removes all occurrences of @var{key} from the message body.
For example, this statement will remove every occurrence of
the word @samp{old}:

@smallexample
modify body ["old"]
@end smallexample
@end deffn

@deffn Command modify [@var{flags}] body @samp{[}@var{key}@samp{]} @var{string}
Replaces all occurences of @var{key} with @var{string}. For example:

@smallexample
modify body :extended ["the old \([[:alnum:]]+\)"] "the new \1"
@end smallexample
@end deffn


@node Inserting Files, Mail Encryption, Modifying Messages, Action List
@subsection Inserting Files

@deffn Command signature-file-append @var{yes-or-no}
@cmindex signature-file-append @var{yes-or-no}
This action command adds at the end of a message body the
@samp{-- } line, and includes a client's
@file{~/.signature} file. Value @samp{no} is the default.
@end deffn

@deffn Command body-append @var{file-name}
@cmindex body-append @var{file-name}
This action command includes at the end of a message body
the contents of the given file. If @file{@var{file-name}} does
not start with a @samp{/} character, it is taken relative to
the current user home directory
@end deffn

@deffn Command body-clear
@cmindex body-clear
Removes the body of the message
@end deffn

@deffn Command body-clear-append @var{file-name}
@cmindex body-clear-append @var{file-name}
Replaces the message body with the contents of the specified
file. The action is equivalent to the following command sequence:

@smallexample
body-clear
body-append @var{file-name}
@end smallexample
@end deffn


@node Mail Encryption, External Processor, Inserting Files, Action List
@subsection Mail Encryption
@cindex GNU Privacy Guard, GnuPG
@cindex Pretty Good Privacy, PGP
@cindex GPG/PGP private key
@cindex GPG/PGP public key

@deffn Command gpg-passphrase @var{passphrase}
@cmindex gpg-passphrase @var{passphrase}
Specifies your private key's pass phrase for signing an outgoing message
using the GNU Privacy Guard (a tool compatible with the Pretty Good
Privacy). Of course, to protect your passwords in the configuration file use the
0600 (u=rw,g=,o=) permissions, otherwise GNU Anubis won't accept them.
We recommend setting the @samp{gpg-passphrase} once in your
configuration file, e.g. at the start of @code{RULE} section.

GNU Anubis supports the GNU Privacy Guard via the
@dfn{GnuPG Made Easy} library, available at
@w{@uref{http://www.gnupg.org/gpgme.html}}.
@end deffn

@deffn Command gpg-encrypt @var{gpg-keys}
@cmindex gpg-encrypt @var{gpg-keys}
This command enables encrypting your outgoing message with the
GNU Privacy Guard (Pretty Good Privacy) public key(s).
@var{gpg-keys} is a comma separated list of keys.

@smallexample
gpg-encrypt "John's public key"
@end smallexample
@end deffn

@deffn Command gpg-sign @var{passphrase}
@deffnx Command gpg-sign @samp{yes} 
@cmindex gpg-sign @var{passphrase}
This command signs the outgoing message with your
GNU Privacy Guard private key. Specify the @var{passphrase} unless
you have already set it using @code{gpg-passphrase}. In the latter
case, use the second form of the command.

For example:

@smallexample
gpg-sign "my passphrase"
@end smallexample

or

@smallexample
@group
gpg-passphrase "my passphrase"
gpg-sign yes
@end group
@end smallexample
@end deffn


@node External Processor, Quick Example, Mail Encryption, Action List
@subsection Using an External Processor

@deffn Command external-body-processor @var{program} [@var{args}]
@cmindex external-body-processor @var{program} [@var{args}]
Pipes the message body through @var{program}. @var{program} should
be a filter program, that reads the text from the standard input
and prints the transformed text on the standard output. The output
from the @var{program} replaces the body of the message.
@var{args} are any additional arguments the program may require.
@end deffn


@node Quick Example, , External Processor, Action List
@subsection Quick Example

Here is a quick example of using an action list:

@smallexample
@group
---BEGIN RULE---
if header [X-Mailer] :re ".*"
   remove [X-Mailer]
   add [X-Comment] "GNU's Not Unix!"
   gpg-sign "my password"
   signature-file-append yes
fi
---END---
@end group
@end smallexample

@noindent
The example above will remove (on-the-fly) the @samp{X-Mailer:} line from
an outgoing message, add an extra header line (@samp{X-Comment:}), sign your
message with your private key, and add a simple signature file from your
home directory.


@node Using Guile Actions, , Action List, Rule System
@section Using Guile Actions
@cindex Guile

The name Guile stands for @dfn{GNU's Ubiquitous Intelligent Language for
Extensions}. It provides a Scheme interpreter conforming to the R4RS
language specification. GNU Anubis uses Guile as its extension language.

This section describes how to write GNU Anubis actions in Scheme.
It assumes that the reader is sufficiently familiar with the
Scheme language. For information about the language, refer to
@ref{Top,,,r4rs,Revised(4) Report on the Algorithmic Language Scheme}.
For more information about Guile,
@xref{Top,,Overview,guile,The Guile Reference Manual}.

@menu
* Defining Guile Actions::
* Invoking Guile Actions::

Predefined Guile Actions
* Rot-13::
* Remailers::
@end menu


@node Defining Guile Actions, Invoking Guile Actions, Using Guile Actions, Using Guile Actions
@subsection Defining Guile Actions
@cindex Guile Actions, defining

A Guile action is defined as follows:

@smalllisp
(define (@var{function-name} @var{header} @var{body} . @var{rest})
 ...)
@end smalllisp

@noindent
Its arguments are:

@table @var
@item header
List of message headers. Each list element is a cons

@smallexample
(@var{name} . @var{value})
@end smallexample

@noindent
where @var{name} is the name of the header field, and @var{value} is
its value with final CRLF stripped off. Both @var{name} and
@var{value} are strings.

@item body
A string containing the message body.

@item rest
Any additional arguments passed to the function from the configuration
file (@pxref{Invoking Guile Actions}). This argument may be absent if
the function is not expected to take optional arguments.
@end table

The function must return a cons whose car contains the new message
headers, and cdr contains the new message body. If the car is
@code{#t}, it means that no headers are changed. If the cdr is
@code{#t}, it means that the body has not changed. If the cdr is
@code{#f}, Anubis will delete the entire message body.

As the first example, let's consider a @dfn{no-operation} action,
i.e. an action that does not alter the message in any way. It can
be written in two ways:

@smalllisp
(define (noop-1 header body)
  (cons header body))
  
(define (noop-2 header body)
  (cons #t #t))
@end smalllisp

The following example is a function that deletes the message body
and adds an additional header:

@smalllisp
(define (proc header body)
  (cons (append header
                (cons "X-Body-Deleted" "yes"))
        #f))
@end smalllisp        

Let's consider a more constructive example. The following function
checks if the @code{Subject} header starts with string @samp{ODP:}
(a Polish equivalent to @samp{Re:}), and if it does, the function
replaces it with @samp{Re:}. It always adds to the message the header

@smallexample
X-Processed-By: GNU Anubis
@end smallexample

@noindent
Additionally, if the optional argument is given, it is appended to
the body of the message.

@smalllisp
(define (fix-subject hdr body . rest)
  "If the Subject: field starts with characters \"ODP:\", replace
them with \"Re:\".
If REST is not empty, append its car to BODY"
  (cons (append
	 (map (lambda (x)
		(if (and (string-ci=? (car x) "subject")
			 (string-ci=? (substring (cdr x) 0 4) "ODP:"))
		    (cons (car x)
			  (string-append "Re:"
					 (substring (cdr x) 4)))
		    x))
	      hdr)
	 (list (cons "X-Processed-By" "GNU Anubis")))
	(if (null? rest)
	    #t
	    (string-append body "\n" (car rest)))))
@end smalllisp


@node Invoking Guile Actions, Rot-13, Defining Guile Actions, Using Guile Actions
@subsection Invoking Guile Actions
@cindex @code{guile-process}

The Guile actions are invoked from the @code{RULE} section using the
@code{guile-process} command. Its syntax is:

@deffn Command guile-process @var{function} @var{args}
Arguments:

@table @var
@item function
The name of the Guile function to be invoked.

@item args
Additional arguments. These are passed to the @var{function} as
its third argument (@var{rest}).
@end table
@end deffn

To pass keyword arguments to the function, use the usual Scheme
notation: @samp{#:key}.

As an example, let's consider the invocation of the @code{fix-subject}
function, defined in the previous subsection:

@smallexample
guile-process fix-subject <<-EOT
                                ----------
                                Kind regards,
                                Antonius Block
                          EOT
@end smallexample

@noindent
In this example, the additional argument (a string of three lines) is
passed to the function, which will add it to the message of the body.


@node Rot-13, Remailers, Invoking Guile Actions, Using Guile Actions
@subsection Support for @sc{rot-13}
@cindex rot-13

The @sc{rot-13} transformation is a simple form of encryption where the
letters A-M are transposed with the letters L-Z. It is often used in
Usenet postings/mailing lists to prevent people from accidentally
reading a disturbing message.

GNU Anubis supports @sc{rot}-13 via a loadable Guile function. To enable
this support, you will have to add the following to your @code{GUILE}
section:

@smallexample
guile-load-program rot-13.scm
@end smallexample

Then, in your @code{RULE} section use:

@deffn Command guile-process rot-13 @var{keyword-arguments}
@fnindex rot-13, Guile function
The command accepts the following @var{keyword-arguments}:

@table @code
@item #:body
Encrypt the entire body of the message

@item #:subject
Encrypt the @samp{Subject} header.
@end table

For example:

@smallexample
@group
trigger "rot-13.*body"
 guile-process rot-13 #:body
done

trigger "rot-13.*subj"
 guile-process rot-13 #:subject
done
@end group
@end smallexample  
@end deffn


@node Remailers, , Rot-13, Using Guile Actions
@subsection Remailers Type-I
@cindex remailer

GNU Anubis supports remailers of type I. The support is written
entirely in Scheme. To enable it you need to specify the following
in the @code{GUILE} section of your configuration file:

@smallexample
@group
guile-load-program remailer.scm
@end group
@end smallexample

To send the message via a remailer, use the following command
in the @code{RULE} section:

@deffn Command guile-process remailer-I @var{keyword-arguments}
@fnindex remailer-I, Guile function
@cmindex guile-process remailer-I @var{keyword-arguments}
The @var{keyword-arguments} specify the various parameters for
the remailer. These are:

@table @code
@item #:rrt @var{string}
This is the only required keyword argument. It sets the value for the
@dfn{Request Remailing To} line. @var{string} should be your actual
recipient's email address.

@item #:post @var{news-group}
Adds the @samp{Anon-Post-To: @var{news-group}} line,
and prepares the message for sending it to the Usenet
via a remailer. Note, that this is only possible with remailers
that support @samp{Anon-Post-To:} header.

@item #:latent @var{time}
Adds the @samp{Latent-Time:} line, that causes a remailer to keep
your message for specified @var{time} before forwarding it. 

@item #:random
Adds random suffix to the latent time.

@item #:header @var{string}
Adds an extra header line to the remailed message.
@end table

Example:

@smallexample
@group
trigger "remail:(.*)/(.*)"
 guile-process remailer-I \
             #:rrt antonius_block@@helsingor.net \
             #:post \1 \
             #:latent \2 \
             #:header "X-Processed-By: GNU Anubis & Remailer-I"
done
@end group
@end smallexample
@end deffn


@node Invoking Anubis, Sample Beginning, Rule System, Top
@chapter Invoking GNU Anubis
@cindex command line

The @command{anubis} executable acts like a daemon.
The behavior of program is controlled by two configuration files,
which have a @strong{higher} priority than command line options.
@xref{Configuration}, for details.

GNU @command{anubis} supports the following command line options:

@table @samp
@item --bind [@var{host}:]@var{port}
@itemx -b
Specify the TCP port on which GNU Anubis listens for connections.
The default @var{host} value is @w{@samp{INADDR_ANY}}, and default
@var{port} number is 24 (private mail system).
@item --remote-mta @var{host}[:@var{port}]
@itemx -r
Specify a remote SMTP host name or IP address, which GNU Anubis will
connect and forward mail to (after a processing).
The default @var{port} number is 25.
@item --local-mta @var{file}
@itemx -l
Execute a local SMTP server, which works on standard input and output
(inetd-type program). This option excludes the @samp{--remote-mta} option.
@item --foreground
@itemx -f
Foreground mode.
@item --stdio
@itemx -i
Use the SMTP protocol (OMP/Tunnel) as described in RFC 821 on standard
input and output.
@item --silent
@itemx -s
Work silently.
@item --verbose
@itemx -v
Work noisily.
@item --debug
@itemx -D
Debug mode.
@item --check-config
@itemx -c
Run the configuration file syntax checker.
@item --show-config-options
Print a list of configuration options used to build GNU Anubis.
@item --relax-perm-check
Do not check a user config file permissions.
@item --altrc @var{file}
Specify alternate system configuration file.
@item --norc
Ignore system configuration file.
@item --version
Print version number and copyright.
@item --help
Print a help message.
@end table

Examples:

@smallexample
$ anubis --remote-mta @var{smtp-host}:25
@end smallexample

@noindent
Run GNU Anubis on port number 24 (private mail system). Note that
you must have root privileges to use port number lower than 1024.
Make the tunnel between your localhost:24 and @var{smtp-host}:25.

@smallexample
$ anubis -f --remote-mta @var{smtp-host}:25
@end smallexample

@noindent
Same as above, but run GNU Anubis in a foreground mode.

@smallexample
$ anubis -f --local-mta /usr/sbin/sendmail -- sendmail -bs
@end smallexample

@noindent
Similar to above, but create the tunnel between localhost:24
and a local program (local MTA). In this example local program
is @command{sendmail} with @samp{-bs} command line option.
The @samp{-bs} option forces @command{sendmail} to work on standard
input and output.

@smallexample
$ anubis --norc --remote-mta @var{smtp-host}:25
@end smallexample

@noindent
Do not read the system configuration file, make the tunnel between
localhost:24 and @var{smtp-host}:25.

@smallexample
$ anubis --bind localhost:1111 --remote-mta @var{smtp-host}:25
@end smallexample

@noindent
Create the tunnel between localhost:1111 and @var{smtp-host}:25.

@smallexample
$ anubis -i
@end smallexample

@noindent
Use the SMTP protocol (OMP/Tunnel) as described in RFC 821
on standard input and output.


@node Sample Beginning, TLS/SSL, Invoking Anubis, Top
@chapter Sample Beginning
@cindex IDENT protocol

By default, GNU Anubis binds to port number 24 (private mail system),
so there shouldn't by any conflict with your local MTA (Mail Transport
Agent). You just have to reconfigure your MUA (Mail User Agent) to make
it talk to GNU Anubis directly on port number 24. All MUAs are normally
set up to talk directly to the MTA, so you must change their settings
and specify GNU Anubis' port number as their target. This makes GNU
Anubis to work as an outgoing mail processor between your MUA and the
MTA. Read your MUA's documentation for more information.

Now you must choose whether you want to connect GNU Anubis with a remote
or local SMTP host via TCP/IP or a local SMTP program, which works on
standard input and output. In the first case, specify the following option:

@smallexample
REMOTE-MTA @var{smtp-host}:25
@end smallexample

@noindent
In the second case (local SMTP program), specify this:

@smallexample
LOCAL-MTA @var{/path/to/your/mta/mta-executable} -bs
@end smallexample

Please note that the @samp{-bs} command line option is a common way
to run MTAs on standard input and output, but it is not a rule.
Read your local MTA's documentation, how to get it working on standard
input and output.

If you would like to run GNU Anubis on port number 25 (which is a default
value for the SMTP) or any other port number, then you must specify the
@samp{bind} keyword. For instance, the following code will bind GNU Anubis
to @samp{localhost:25}:

@smallexample
BIND localhost:25
@end smallexample

This can make a conflict between GNU Anubis and your local MTA, which usually
listens on port number 25. To solve this problem, you can for instance
disable the MTA and specify the @samp{local-mta} keyword, or run MTA on port
number different than GNU Anubis' port number (e.g. 1111). Please read your
local MTA's documentation about this topic. For example:

@smallexample
@group
BIND localhost:25
REMOTE-MTA localhost:1111
@end group
@end smallexample

@strong{Caution:} Make sure that your local machine doesn't accept any
incoming mail (i.e. it is @emph{not} a POP or IMAP server), otherwise
you cannot disable your MTA or change its port number!

@strong{Caution:} It is required to install the TCP/IP IDENT protocol
server (RFC 1413). Without it, an outgoing mail processor will fail.
Most modern GNU/Linux (or *BSD) distributions have already installed
such a server. If not, try @samp{pidentd}, available at:
@w{@uref{ftp://ftp.lysator.liu.se/pub/ident/servers/}}

All Mutt users, who would like to set up GNU Anubis between their MUA
and MTA, should consider using the @samp{msg2smtp.pl} Perl script
from the @file{contrib} directory (part of the distribution).


@node TLS/SSL, Problems, Sample Beginning, Top
@chapter Using the TLS/SSL Encryption
@cindex Transport Layer Security, TLS
@cindex Secure Socket Layer, SSL
@cindex GnuTLS
@cindex OpenSSL
@cindex encryption

According to the RFC 2246 document, the TLS (Transport Layer Security)
protocol provides communications privacy over the Internet. The protocol
allows client/server applications to communicate in a way that is designed
to prevent eavesdropping, tampering, or message forgery. The primary goal
of the TLS Protocol is to provide privacy and data integrity between two
communicating applications. The TLS protocol itself is based on the SSL 3.0
(Secure Socket Layer) protocol specification.

GNU Anubis supports the TLS/SSL (via the GnuTLS, a Transport Layer Security
Library available at @w{@uref{http://www.gnutls.org/}}, or OpenSSL,
a cryptographic package available at @w{@uref{http://www.openssl.org/}}),
but your MTA must provide the STARTTLS command first. This can be checked by:

@smallexample
@group
$ telnet @var{your-smtp-host} 25
  ehlo @var{your-domain-name}
@end group
@end smallexample

@noindent
The server will response with all its available commands.
If you see the STARTTLS, then you can use the TLS/SSL encryption.
If your MUA doesn't support the TLS/SSL encryption, but your MTA does,
then you should use the @samp{oneway-ssl} keyword in your configuration
file. Before using the TLS/SSL encryption, you must generate a proper
private key and a certificate. You can do it simply with:

@smallexample
@group
$ cd anubis-directory
$ ./build/keygen.sh
@end group
@end smallexample

@noindent
This will create the @file{anubis.pem} file.
For example copy this file to @w{@file{/usr/share/ssl/certs/}}.
Next, edit your configuration file by adding:

@smallexample
@group
ssl yes
ssl-key @var{path-to-the-private-key}
ssl-cert @var{path-to-the-certificate}
@end group
@end smallexample

For example:

@smallexample
@group
ssl-key /usr/share/ssl/certs/anubis.pem
ssl-cert /usr/share/ssl/certs/anubis.pem
@end group
@end smallexample

@noindent
@strong{Caution:} Each client can specify its own private key
and a certificate by adding the @samp{ssl-key} and @samp{ssl-cert}
keywords in its own user configuration file.

@noindent
@xref{Encryption Settings}, for details.


@node Problems, GNU Free Documentation License, TLS/SSL, Top
@chapter Reporting Bugs
@cindex bugs
@cindex problems

Please send any bug reports, improvements, comments,
suggestions, or questions to @email{bug-anubis@@gnu.org}.

Before reporting a bug, make sure you have actually found
a real bug. Carefully reread the documentation and see if it
really says you can do what you are trying to do. If it is
not clear whether you should be able to do something or not,
report that too; it's a bug in the documentation!


@node GNU Free Documentation License, Concept Index, Problems, Top
@include fdl.texi


@node Concept Index, , GNU Free Documentation License, Top
@unnumbered Concept Index
@printindex cp
@shortcontents
@contents
@bye

@c anubis.texi ends here
